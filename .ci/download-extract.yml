# NOTE: downloadPath and destinationFolder should not be the same!
# as ExtractFiles will create destinationFolder that will result
# in deleting anything in it, including the archive if downloadPath
# is the same as destinationFolder
parameters:
  artifactName: ''
  downloadPath: ''
  name: ''
  archiveFilePatterns: ''
  destinationFolder: ''
  specificBuildWithTriggering: false

steps:
- ${{ if eq(parameters.specificBuildWithTriggering, 'true') }}:
  - task: DownloadBuildArtifacts@0
    displayName: ${{ format('Download {0} archive', parameters.name) }}
    continueOnError: true
    inputs:
      specificBuildWithTriggering: true
      artifactName: ${{ parameters.artifactName }}
      downloadPath: ${{ parameters.downloadPath }}

- ${{ if and(ne(parameters.specificBuildWithTriggering, 'true'), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - task: PythonScript@0
    displayName: ${{ format('Download {0} archive', parameters.name) }}
    continueOnError: true
    inputs:
      scriptSource: 'filePath'
      scriptPath: '.ci/get_latest_artifact.py'
      arguments: '$(Build.SourceBranchName) ${{ parameters.artifactName }}'
      workingDirectory: ${{ parameters.downloadPath }}
      failOnStderr: true

# TODO: change back to DownloadBuildArtifacts task when this issue is fixed
# https://github.com/MicrosoftDocs/vsts-docs/issues/2889
- ${{ if and(ne(parameters.specificBuildWithTriggering, 'true'), eq(variables['Build.Reason'], 'PullRequest')) }}:
  - task: PythonScript@0
    displayName: ${{ format('Download {0} archive', parameters.name) }}
    continueOnError: true
    inputs:
      scriptSource: 'filePath'
      scriptPath: '.ci/get_latest_artifact.py'
      arguments: '$(System.PullRequest.TargetBranch) ${{ parameters.artifactName }}'
      workingDirectory: ${{ parameters.downloadPath }}
      failOnStderr: true

# Windows
- powershell: |
    $ARTIFACT_DIR = ${{ format('"{0}\{1}"', parameters.downloadPath, parameters.artifactName) }}
    if (Test-Path -Path $ARTIFACT_DIR) {
      Write-Host "##vso[task.setVariable variable=ARTIFACT_EXISTS;]true"
    } else {
      Write-Host "##vso[task.setVariable variable=ARTIFACT_EXISTS;]false"
    }
  displayName: ${{ format('Checking {0} download task status', parameters.name) }}
  condition: eq(variables['Agent.OS'], 'Windows_NT')

# Linux and macOS
- bash: |
    if [ -d ${{ format('{0}/{1}', parameters.downloadPath, parameters.artifactName) }} ]; then
      echo "##vso[task.setVariable variable=ARTIFACT_EXISTS]true"
    else
      echo "##vso[task.setVariable variable=ARTIFACT_EXISTS]false"
    fi
  displayName: ${{ format('Checking {0} download task status', parameters.name) }}
  condition: ne(variables['Agent.OS'], 'Windows_NT')

- task: ExtractFiles@1
  displayName: ${{ format('Extract {0} archive', parameters.name) }}
  condition: eq(variables.ARTIFACT_EXISTS, 'true')
  inputs:
    archiveFilePatterns: ${{ format('{0}/{1}/*.tar*', parameters.downloadPath, parameters.artifactName) }}
    destinationFolder: ${{ parameters.destinationFolder }}
    cleanDestinationFolder: true
